type AcidValidation = record {
  validation_date : nat64;
  acid_number : text;
  is_valid : bool;
  customs_data : opt text;
};
type Document = record {
  id : text;
  status : DocumentStatus;
  acid_number : text;
  owner : principal;
  created_at : nat64;
  ethereum_tx_hash : text;
  value_usd : nat64;
};
type DocumentStatus = variant { NftMinted; Rejected; Verified; Pending };
type Loan = record {
  id : text;
  status : LoanStatus;
  document_id : text;
  repayment_date : nat64;
  created_at : nat64;
  borrower : principal;
  interest_rate : float64;
  amount : nat64;
};
type LoanStatus = variant { Repaid; Active; Approved; Defaulted; Pending };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : bool; Err : text };
type TransferPayload = record {
  to : text;
  token_id : text;
  contract : text;
  log_index : nat64;
  from : text;
  network : text;
  block_number : nat64;
  tx_hash : text;
};
type CargoXMapping = record {
  id : text;
  nft_hash : text;
  acid_number : text;
  verified : bool;
  created_at : nat64;
  owner : principal;
  customs_entry_id : opt text;
};
type CustomsVerification = record {
  id : text;
  nft_hash : text;
  acid_number : text;
  verification_status : CustomsStatus;
  verified_at : opt nat64;
  customs_data : opt text;
  created_at : nat64;
  verified_by : opt principal;
};
type CustomsStatus = variant { Pending; Verified; Rejected; UnderReview };
service : {
  add_id : (nat64) -> (bool);
  approve_document : (text) -> (Result);
  approve_loan : (text) -> (Result);
  get_acid_validation : (text) -> (opt AcidValidation) query;
  get_all_ids : () -> (vec nat64) query;
  get_balance : () -> (nat64) query;
  get_document : (text) -> (opt Document) query;
  get_loan : (text) -> (opt Loan) query;
  get_my_documents : () -> (vec Document) query;
  get_my_loans : () -> (vec Loan) query;
  get_principals : () -> (vec principal) query;
  get_transfers : () -> (vec TransferPayload) query;
  has_id : (nat64) -> (bool) query;
  ingest_transfer : (TransferPayload) -> ();
  mint : (nat64) -> ();
  remove_id : (nat64) -> (bool);
  repay_loan : (text, nat64) -> (Result);
  request_loan : (text, nat64, nat64) -> (Result_1);
  save_principal : (principal) -> ();
  submit_document : (text, text, nat64) -> (Result_1);
  transfer : (principal, nat64) -> (Result);
  validate_acid : (text) -> (Result_2);
  // Customs Integration Functions
  link_cargox_to_acid : (text, text) -> (Result_1);
  get_cargox_mapping : (text) -> (opt CargoXMapping) query;
  get_my_cargox_mappings : () -> (vec CargoXMapping) query;
  get_all_cargox_mappings : () -> (vec CargoXMapping) query;
  verify_customs_entry : (text) -> (Result);
  reject_customs_entry : (text, text) -> (Result);
  get_customs_verification : (text) -> (opt CustomsVerification) query;
  get_all_customs_verifications : () -> (vec CustomsVerification) query;
  get_pending_customs_verifications : () -> (vec CustomsVerification) query;
  trigger_lending : (text) -> (Result);
  batch_trigger_lending : (vec text) -> (Result_1);
  get_document_by_nft_hash : (text) -> (opt Document) query;
  get_verification_stats : () -> (nat64, nat64, nat64, nat64) query;
}
