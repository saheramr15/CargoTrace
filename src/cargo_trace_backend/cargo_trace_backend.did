type AcidValidation = record {
  validation_date : nat64;
  acid_number : text;
  is_valid : bool;
  customs_data : opt text;
};
type CargoXDocument = record {
  document_hash : text;
  document_type : text;
  token_id : text;
  owner : text;
  metadata : DocumentMetadata;
  last_transfer : TransferEvent;
};
type CargoXMapping = record {
  id : text;
  verified : bool;
  acid_number : text;
  owner : principal;
  created_at : nat64;
  nft_hash : text;
  customs_entry_id : opt text;
};
type CustomsStatus = variant { UnderReview; Rejected; Verified; Pending };
type CustomsVerification = record {
  id : text;
  acid_number : text;
  created_at : nat64;
  verification_status : CustomsStatus;
  nft_hash : text;
  verified_at : opt nat64;
  verified_by : opt principal;
  customs_data : opt text;
};
type Document = record {
  id : text;
  status : DocumentStatus;
  acid_number : text;
  owner : principal;
  created_at : nat64;
  ethereum_tx_hash : text;
  value_usd : nat64;
};
type DocumentAttribute = record { trait_type : text; value : text };
type DocumentMetadata = record {
  document_hash : opt text;
  document_type : opt text;
  external_url : opt text;
  name : opt text;
  description : opt text;
  issuer : opt text;
  attributes : vec DocumentAttribute;
  image : opt text;
  creation_date : opt text;
};
type DocumentStatus = variant { NftMinted; Rejected; Verified; Pending };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Loan = record {
  id : text;
  status : LoanStatus;
  document_id : text;
  repayment_date : nat64;
  transfer_block_height : opt nat;
  created_at : nat64;
  borrower : principal;
  interest_rate : float64;
  amount : nat64;
};
type LoanStatus = variant {
  Repaid;
  Active;
  Approved;
  TransferPending;
  Rejected;
  Defaulted;
  TransferFailed;
  Pending;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : vec text; Err : text };
type Result_2 = variant { Ok : nat64; Err : text };
type Result_3 = variant { Ok : vec CargoXDocument; Err : text };
type Result_4 = variant { Ok : vec TransferEvent; Err : text };
type Result_5 = variant { Ok : opt CargoXDocument; Err : text };
type Result_6 = variant { Ok : text; Err : text };
type Result_7 = variant { Ok : bool; Err : text };
type TransferEvent = record {
  to : text;
  token_id : text;
  metadata : opt DocumentMetadata;
  from : text;
  block_number : nat64;
  tx_hash : text;
};
type TransferPayload = record {
  to : text;
  token_id : text;
  contract : text;
  log_index : nat64;
  from : text;
  network : text;
  block_number : nat64;
  tx_hash : text;
};
type TransformArgs = record { context : blob; response : HttpResponse };
service : () -> {
  add_id : (nat64) -> (bool);
  approve_document : (text) -> (Result);
  approve_loan : (text) -> (Result);
  batch_trigger_lending : (vec text) -> (Result_1);
  check_canister_balance : () -> (Result_2);
  fetch_cargox_documents : () -> (Result_3);
  fetch_cargox_documents_simple : () -> (Result_3);
  fetch_transfers : () -> (Result_4);
  fetch_transfers_with_metadata : () -> (Result_4);
  get_acid_validation : (text) -> (opt AcidValidation) query;
  get_active_loan : () -> (opt Loan) query;
  get_all_cargox_mappings : () -> (vec CargoXMapping) query;
  get_all_customs_verifications : () -> (vec CustomsVerification) query;
  get_all_ids : () -> (vec nat64) query;
  get_all_loan_ids : () -> (vec text) query;
  get_all_loans : () -> (vec Loan) query;
  get_balance : () -> (nat64) query;
  get_canister_info : () -> (text) query;
  get_cargox_mapping : (text) -> (opt CargoXMapping) query;
  get_customs_verification : (text) -> (opt CustomsVerification) query;
  get_document : (text) -> (opt Document) query;
  get_document_by_nft_hash : (text) -> (opt Document) query;
  get_document_by_token_id : (text) -> (Result_5);
  get_loan : (text) -> (opt Loan) query;
  get_my_cargox_mappings : () -> (vec CargoXMapping) query;
  get_my_documents : () -> (vec Document) query;
  get_my_loans : () -> (vec Loan) query;
  get_pending_customs_verifications : () -> (vec CustomsVerification) query;
  get_principals : () -> (vec principal) query;
  get_transfers : () -> (vec TransferPayload) query;
  get_verification_stats : () -> (nat64, nat64, nat64, nat64) query;
  get_wallet_balance_async : () -> (Result_2);
  get_wallet_balance_usd : () -> (Result_2);
  has_id : (nat64) -> (bool) query;
  ingest_transfer : (TransferPayload) -> ();
  init_ledger_principal : (text) -> (Result);
  link_cargox_to_acid : (text, text) -> (Result_6);
  mint : (nat64) -> ();
  reject_customs_entry : (text, text) -> (Result);
  reject_document : (text) -> (Result);
  reject_loan : (text) -> (Result);
  remove_id : (nat64) -> (bool);
  repay_loan : (text, nat64) -> (Result);
  request_loan : (text, nat64, nat64) -> (Result_6);
  request_test_tokens : (nat64) -> (Result);
  retry_loan_transfer : (text) -> (Result);
  save_principal : (principal) -> ();
  submit_document : (text, text, nat64) -> (Result_6);
  transfer : (principal, nat64) -> (Result);
  transform_response : (TransformArgs) -> (HttpResponse) query;
  trigger_lending : (text) -> (Result);
  validate_acid : (text) -> (Result_7);
  verify_customs_entry : (text) -> (Result);
}
